package randomize

import (
	"math/rand"
	"sync"
	"sync/atomic"
	"time"
)

///Create random numbers based on prime times primes kickers

func PseudoPrimeGenerator() int64 {
	var total int64
	var wg sync.WaitGroup
	var mu sync.Mutex
	rnd := rand.New(rand.NewSource(time.Now().UnixNano()))
	_loop := rnd.Intn(123) + 11
	_primesKickers := []int64{
		51, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,
		227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283,
		293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373,
		379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449,
		457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541,
		547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617,
		619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,
		709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797,
		809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881,
		883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977,
		983, 991, 997, 1009, 1013, 1019, 1021,
	}
	_primesFillers := []int64{
		84017, 84047, 84053, 84059, 84061, 84067, 84089, 84121, 84127,
		84131, 84137, 84143, 84163, 84179, 84181, 84191, 84199, 84211,
		84221, 84223, 84229, 84239, 84247, 84263, 84299, 84307, 84313,
		84317, 84319, 84347, 84349, 84377, 84389, 84391, 84401, 84407,
		84421, 84431, 84437, 84443, 84449, 84457, 84463, 84467, 84481,
		84499, 84503, 84509, 84521, 84523, 84533, 84551, 84559, 84589,
		84629, 84631, 84649, 84653, 84659, 84673, 84691, 84697, 84701,
		84713, 84719, 84731, 84737, 84751, 84761, 84787, 84793, 84809,
		84811, 84827, 84857, 84859, 84869, 84871, 84913, 84919, 84947,
		84961, 84967, 84977, 84979, 84991, 85009, 85021, 85027, 85037,
		85049, 85061, 85081, 85087, 85091, 85093, 85103, 85109, 85121,
		85133, 85147, 85159, 85193, 85199, 85201, 85213, 85223, 85229,
		85237, 85243, 85247, 85259, 85297, 85303, 85313, 85331, 85333,
		85361, 85363, 85369, 85381, 85411, 85427, 85429, 85439, 85447,
		85451, 85453, 85469, 85487, 85513, 85517, 85523, 85531, 85549,
		85571, 85577, 85597, 85601, 85607, 85619, 85621, 85627, 85639,
		85643, 85661, 85667, 85669, 85691, 85703, 85711, 85717, 85733,
		85751, 99277, 99289, 99317, 99347, 99349, 99367, 99371, 99377,
		99391, 99397, 99401, 99409, 99431, 99439, 99469, 99487, 99497,
		99523, 99527, 99529, 99551, 99559, 99563, 99571, 99577, 99581,
		99607, 99611, 99623, 99643, 99661, 99667, 99679, 99689, 99707,
		99709, 99713, 99719, 99721, 99733, 99761, 99767, 99787, 99793,
		99809, 99817, 99823, 99829, 99833, 99839, 99859, 99871, 99877,
		99881, 99901, 99907, 99923, 99929, 99961, 99971, 99989, 99991,
		100003, 100019, 100043, 100049, 100057, 100069, 100103, 100109,
		100129, 100151, 100153, 100169, 100183, 100189, 100193, 100207,
		100213, 100237, 100267, 100271, 100279, 100291, 100297, 100313,
		100333, 100343, 100357, 100361, 100363, 100379, 100391, 100393,
		100403, 100411, 100417, 100447, 100459, 100469, 100483, 100493,
		100501, 100511, 100517, 100519, 100523, 100537, 100547, 100549,
		100559, 100591, 100609, 100613, 100621, 100649, 100669, 100673,
		100693, 100699, 100703, 100733, 100741, 100747, 100769, 100787,
		100799, 100801, 100811, 100823,
		31607, 31627, 31643, 31649, 31657, 31663, 31667, 31687, 31699,
		31721, 31723, 31727, 31729, 31741, 31751, 31769, 31771, 31793,
		31799, 31817, 31847, 31849, 31859, 31873, 31883, 31891, 31907,
		31957, 31963, 31973, 31981, 31991, 32003, 32009, 32027, 32029,
		32051, 32057, 32059, 32063, 32069, 32077, 32083, 32089, 32099,
		32117, 32119, 32141, 32143, 32159, 32173, 32183, 32189, 32191,
		32203, 32213, 32233, 32237, 32251, 32257, 32261, 32297, 32299,
		32303, 32309, 32321, 32323, 32327, 32341, 32353, 32359, 32363,
		32369, 32371, 32377, 32381, 32401, 32411, 32413, 32423, 32429,
		32441, 32443, 32467, 32479, 32491, 32497, 32503, 32507, 32531,
		32533, 32537, 32561, 32563, 32569, 32573, 32579, 32587, 32603,
		32609, 32611, 32621, 32633, 32647, 32653, 32687, 32693, 32707,
		32713, 32717, 32719, 32749, 32771, 32779, 32783, 32789, 32797,
		32801, 32803, 32831, 32833, 32839, 32843, 32869, 32887, 32909,
		32911, 32917, 32933, 32939, 32941, 32957, 32969, 32971, 32983,
		32987, 32993, 32999, 33013, 33023, 33029, 33037, 33049, 33053,
		33071, 33073, 33083, 33091, 33107, 33113, 33119, 33149, 33151,
		33161, 33179, 33181, 33191, 33199, 33203, 33211, 33223, 33247,
		33287, 33289, 33301, 33311, 33317, 33329, 33331, 33343, 33347,
		33349, 33353, 33359, 33377, 33391, 33403, 33409, 33413, 33427,
	}

	for i := 0; i < _loop; i++ {
		wg.Add(1)
		go func(i int) {
			defer wg.Done()
			mu.Lock()
			_seed := _primesFillers[rnd.Intn(len(_primesFillers))] * _primesKickers[rnd.Intn(len(_primesKickers))]
			mu.Unlock()
			atomic.AddInt64(&total, _seed)
		}(i)
	}
	wg.Wait()
	return total
}
